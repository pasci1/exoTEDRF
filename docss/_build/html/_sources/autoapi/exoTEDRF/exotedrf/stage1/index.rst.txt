:py:mod:`exoTEDRF.exotedrf.stage1`
==================================

.. py:module:: exoTEDRF.exotedrf.stage1

.. autoapi-nested-parse::

   Created on Thurs Jul 21 17:30 2022

   @author: MCR

   Custom JWST DMS pipeline steps for Stage 1 (detector level processing).



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   exoTEDRF.exotedrf.stage1.DQInitStep
   exoTEDRF.exotedrf.stage1.SaturationStep
   exoTEDRF.exotedrf.stage1.SuperBiasStep
   exoTEDRF.exotedrf.stage1.RefPixStep
   exoTEDRF.exotedrf.stage1.DarkCurrentStep
   exoTEDRF.exotedrf.stage1.OneOverFStep
   exoTEDRF.exotedrf.stage1.LinearityStep
   exoTEDRF.exotedrf.stage1.JumpStep
   exoTEDRF.exotedrf.stage1.RampFitStep
   exoTEDRF.exotedrf.stage1.GainScaleStep



Functions
~~~~~~~~~

.. autoapisummary::

   exoTEDRF.exotedrf.stage1.flag_hot_pixels
   exoTEDRF.exotedrf.stage1.jumpstep_in_time
   exoTEDRF.exotedrf.stage1.oneoverfstep_scale
   exoTEDRF.exotedrf.stage1.oneoverfstep_solve
   exoTEDRF.exotedrf.stage1.run_stage1



.. py:class:: DQInitStep(input_data, output_dir, deepframe=None)


   Wrapper around default calwebb_detector1 Data Quality Initialization
   step.

   .. py:method:: run(save_results=True, force_redo=False, **kwargs)

      Method to run the step.




.. py:class:: SaturationStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Saturation Detection step.


   .. py:method:: run(save_results=True, force_redo=False, **kwargs)

      Method to run the step.




.. py:class:: SuperBiasStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Super Bias Subtraction step.


   .. py:method:: run(save_results=True, force_redo=False, do_plot=False, show_plot=False, **kwargs)

      Method to run the step.




.. py:class:: RefPixStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Reference Pixel Correction
   step.

   .. py:method:: run(save_results=True, force_redo=False, **kwargs)

      Method to run the step.




.. py:class:: DarkCurrentStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Dark Current Subtraction step.


   .. py:method:: run(save_results=True, force_redo=False, **kwargs)

      Method to run the step.




.. py:class:: OneOverFStep(input_data, baseline_ints, output_dir, method='scale-achromatic', timeseries=None, timeseries_o2=None, pixel_masks=None, background=None, centroids=None)


   Wrapper around custom 1/f Correction Step.


   .. py:method:: run(inner_mask_width=40, outer_mask_width=70, save_results=True, force_redo=False, do_plot=False, show_plot=False, **kwargs)

      Method to run the step.




.. py:class:: LinearityStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Linearity Correction step.


   .. py:method:: run(save_results=True, force_redo=False, do_plot=False, show_plot=False, **kwargs)

      Method to run the step.




.. py:class:: JumpStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Jump Detection step with some
   custom modifications.

   .. py:method:: run(save_results=True, force_redo=False, flag_up_ramp=False, rejection_threshold=15, flag_in_time=True, time_rejection_threshold=10, time_window=5, do_plot=False, show_plot=False, **kwargs)

      Method to run the step.




.. py:class:: RampFitStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Ramp Fit step.


   .. py:method:: run(save_results=True, force_redo=False, **kwargs)

      Method to run the step.




.. py:class:: GainScaleStep(input_data, output_dir)


   Wrapper around default calwebb_detector1 Gain Scale Correction step.


   .. py:method:: run(save_results=True, force_redo=False, **kwargs)

      Method to run the step.




.. py:function:: flag_hot_pixels(result, deepframe, box_size=10, thresh=15, hot_pix=None)

   Identify and flag additional hot pixels in a SOSS TSO which are not
   already in the default pipeline flags.

   :param result: Input datamodel, or path to.
   :type result: jwst.datamodel, str
   :param deepframe: Deep stack of the time series, or path to.
   :type deepframe: array-like(float), str
   :param box_size: Size of box around each pixel to consider.
   :type box_size: int
   :param thresh: Sigma threshhold above which a pixel will be flagged.
   :type thresh: int
   :param hot_pix: Map of pixels to flag.
   :type hot_pix: array-like(bool), None

   :returns: * **result** (*jwst.datamodel*) -- Input datamodel with newly flagged pixels added to pixeldq extension.
             * **hot_pix** (*np.array(bool)*) -- Map of new flagged pixels.


.. py:function:: jumpstep_in_time(datafile, window=5, thresh=10, fileroot=None, save_results=True, output_dir=None)

   Jump detection step in the temporal domain. This algorithm is based off
   of Nikolov+ (2014) and identifies cosmic ray hits in the temporal domain.
   All jumps for ngroup<=2 are replaced with the median of surrounding
   integrations, whereas jumps for ngroup>3 are flagged.

   :param datafile: Path to data file, or RampModel itself for a segment of the TSO.
                    Should be 4D ramp.
   :type datafile: str, RampModel
   :param window: Number of integrations to use for cosmic ray flagging. Must be odd.
   :type window: int
   :param thresh: Sigma threshold for a pixel to be flagged.
   :type thresh: int
   :param output_dir: Directory to which to save results.
   :type output_dir: str
   :param save_results: If True, save results to disk.
   :type save_results: bool
   :param fileroot: Root name for output file.
   :type fileroot: str, None

   :returns: **datafile** -- Data file corrected for cosmic ray hits.
   :rtype: RampModel


.. py:function:: oneoverfstep_scale(datafiles, baseline_ints, inner_mask_width=40, outer_mask_width=70, even_odd_rows=True, background=None, timeseries=None, timeseries_o2=None, output_dir=None, save_results=True, pixel_masks=None, fileroots=None, method='achromatic', centroids=None)

   Custom 1/f correction routine to be applied at the group or
   integration level. A median stack is constructed using all out-of-transit
   integrations and subtracted from each individual integration. The
   column-wise median of this difference image is then subtracted from the
   original frame to correct 1/f noise. Outlier pixels, background
   contaminants, and the target trace itself can (should) be masked to
   improve the estimation.

   :param datafiles: List of paths to data files, or datamodels themselves for each segment
                     of the TSO. Should be 4D ramps, but 3D rate files are also accepted.
   :type datafiles: array-like[str], array-like[RampModel], array-like[CubeModel]
   :param baseline_ints: Integration numbers of ingress and egress.
   :type baseline_ints: array-like[int]
   :param inner_mask_width: Width around the trace to mask. For windowed methods, defines the
                            inner window edge.
   :type inner_mask_width: int
   :param outer_mask_width: For windowed methods, the outer edge of the window.
   :type outer_mask_width: int
   :param even_odd_rows: If True, calculate 1/f noise seperately for even and odd numbered rows.
   :type even_odd_rows: bool
   :param background: Model of background flux.
   :type background: str, array-like[float], None
   :param timeseries: Estimate of normalized light curve(s), or path to file.
   :type timeseries: array-like[float], str, None
   :param timeseries_o2: Estimate of normalized light curve(s) for order 2, or path to file.
                         Only necessary if method is chromatic.
   :type timeseries_o2: array-like[float], str, None
   :param output_dir: Directory to which to save results. Only necessary if saving results.
   :type output_dir: str, None
   :param save_results: If True, save results to disk.
   :type save_results: bool
   :param pixel_masks: List of paths to maps of pixels to mask for each data segment. Should
                       be 3D (nints, dimy, dimx).
   :type pixel_masks: array-like[str], None
   :param fileroots: Root names for output files. Only necessary if saving results.
   :type fileroots: array-like[str], None
   :param method: Options are "chromatic", "achromatic", or "achromatic-window".
   :type method: str
   :param centroids: File containing trace positions for each order.
   :type centroids: str, None

   :returns: **results** -- RampModels for each segment, corrected for 1/f noise.
   :rtype: array-like[CubeModel]


.. py:function:: oneoverfstep_solve(datafiles, baseline_ints, trace_width=70, background=None, output_dir=None, save_results=True, pixel_masks=None, fileroots=None, do_plot=False, show_plot=False, centroids=None)

   Custom 1/f correction routine to be applied at the group or
   integration level. 1/f noise level and median frame scaling is calculated
   independently for each pixel column. Outlier pixels and background
   contaminants can (should) be masked to improve the estimation.

   :param datafiles: List of paths to data files, or datamodels themselves for each segment
                     of the TSO. Should be 4D ramps, but 3D rate files are also accepted.
   :type datafiles: array-like[str], array-like[RampModel], array-like[CubeModel]
   :param baseline_ints: Integration numbers of ingress and egress.
   :type baseline_ints: array-like[int]
   :param trace_width: Defines the width around the trace to consider for MLE solving.
   :type trace_width: int
   :param background: Model of background flux.
   :type background: str, array-like[float], None
   :param output_dir: Directory to which to save results. Only necessary if saving results.
   :type output_dir: str, None
   :param save_results: If True, save results to disk.
   :type save_results: bool
   :param pixel_masks: List of paths to maps of pixels to mask for each data segment. Can be
                       3D (nints, dimy, dimx), or 2D (dimy, dimx).
   :type pixel_masks: array-like[str], None
   :param fileroots: Root names for output files. Only necessary if saving results.
   :type fileroots: array-like[str], None
   :param do_plot: If True, do the step diagnostic plot.
   :type do_plot: bool
   :param show_plot: If True, show the step diagnostic plot instead of/in addition to
                     saving it to file.
   :type show_plot: bool
   :param centroids: Path to file containing trace positions for each order.
   :type centroids: str, None

   :returns: **corrected_rampmodels** -- RampModels for each segment, corrected for 1/f noise.
   :rtype: array-like[CubeModel]


.. py:function:: run_stage1(results, background_model, baseline_ints=None, oof_method='scale-achromatic', timeseries=None, timeseries_o2=None, save_results=True, pixel_masks=None, force_redo=False, deepframe=None, flag_up_ramp=False, rejection_threshold=15, flag_in_time=True, time_rejection_threshold=10, root_dir='./', output_tag='', skip_steps=None, do_plot=False, show_plot=False, inner_mask_width=40, outer_mask_width=70, centroids=None, **kwargs)

   Run the exoTEDRF Stage 1 pipeline: detector level processing,
   using a combination of official STScI DMS and custom steps. Documentation
   for the official DMS steps can be found here:
   https://jwst-pipeline.readthedocs.io/en/latest/jwst/pipeline/calwebb_detector1.html

   :param results: List of paths to input uncalibrated datafiles for all segments in an
                   exposure.
   :type results: array-like[str]
   :param background_model: SOSS background model.
   :type background_model: array-like[float]
   :param baseline_ints: Integration numbers for transit ingress and egress.
   :type baseline_ints: array-like[int]
   :param oof_method: 1/f correction method. Options are "scale-chromatic",
                      "scale-achromatic", "scale-achromatic-window", or "solve".
   :type oof_method: str
   :param timeseries: Estimate of the normalized light curve, either 1D or 2D.
   :type timeseries: array-like[float], None
   :param timeseries_o2: Estimate of the normalized light curve for order 2, either 1D or 2D.
   :type timeseries_o2: array-like[float], None
   :param save_results: If True, save results of each step to file.
   :type save_results: bool
   :param pixel_masks: For improved 1/f noise corecton. List of paths to outlier maps for each
                       data segment. Can be 3D (nints, dimy, dimx), or 2D (dimy, dimx) files.
   :type pixel_masks: array-like[str], None
   :param force_redo: If True, redo steps even if outputs files are already present.
   :type force_redo: bool
   :param deepframe: Path to deep stack, such as one produced by BadPixStep.
   :type deepframe: str, None
   :param flag_up_ramp: Whether to flag jumps up the ramp. This is the default flagging in the
                        STScI pipeline. Note that this is broken as of jwst v1.12.5.
   :type flag_up_ramp: bool
   :param rejection_threshold: For jump detection; sigma threshold for a pixel to be considered an
                               outlier.
   :type rejection_threshold: int
   :param flag_in_time: If True, flag cosmic rays temporally in addition to the default
                        up-the-ramp jump detection.
   :type flag_in_time: bool
   :param time_rejection_threshold: Sigma threshold to flag outliers in temporal flagging.
   :type time_rejection_threshold: int
   :param root_dir: Directory from which all relative paths are defined.
   :type root_dir: str
   :param output_tag: Name tag to append to pipeline outputs directory.
   :type output_tag: str
   :param skip_steps: Step names to skip (if any).
   :type skip_steps: array-like[str], None
   :param do_plot: If True, make step diagnostic plots.
   :type do_plot: bool
   :param show_plot: Only necessary if do_plot is True. Show the diagnostic plots in
                     addition to/instead of saving to file.
   :type show_plot: bool
   :param inner_mask_width: For 1/f correction. For scale-achromatic, defines the width around the
                            trace to mask. For windowed methods, defines the inner edge of the
                            window.
   :type inner_mask_width: int
   :param outer_mask_width: For 1/f correction. For windowed methods, defines the outer edge of the
                            window. For solve, defines the width around the trace to use.
   :type outer_mask_width: int
   :param centroids: Path to file containing trace positions for each order.
   :type centroids: str, None

   :returns: **results** -- Datafiles for each segment processed through Stage 1.
   :rtype: array-like[RampModel]


