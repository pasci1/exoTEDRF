:py:mod:`exoTEDRF.exotedrf.stage3`
==================================

.. py:module:: exoTEDRF.exotedrf.stage3

.. autoapi-nested-parse::

   Created on Thurs Jul 21 17:33 2022

   @author: MCR

   Custom JWST DMS pipeline steps for Stage 3 (1D spectral extraction).



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   exoTEDRF.exotedrf.stage3.SpecProfileStep
   exoTEDRF.exotedrf.stage3.Extract1DStep



Functions
~~~~~~~~~

.. autoapisummary::

   exoTEDRF.exotedrf.stage3.specprofilestep
   exoTEDRF.exotedrf.stage3.box_extract_soss
   exoTEDRF.exotedrf.stage3.do_box_extraction
   exoTEDRF.exotedrf.stage3.do_ccf
   exoTEDRF.exotedrf.stage3.format_extracted_spectra
   exoTEDRF.exotedrf.stage3.get_soss_estimate
   exoTEDRF.exotedrf.stage3.run_stage3



.. py:class:: SpecProfileStep(datafiles, output_dir='./')


   Wrapper around custom SpecProfile Reference Construction step.


   .. py:method:: run(force_redo=False, empirical=True)

      Method to run the step.




.. py:class:: Extract1DStep(input_data, extract_method, st_teff=None, st_logg=None, st_met=None, planet_letter='b', output_dir='./')


   Wrapper around default calwebb_spec2 1D Spectral Extraction step, with
   custom modifications.

   .. py:method:: run(soss_width=40, specprofile=None, centroids=None, save_results=True, force_redo=False, do_plot=False, show_plot=False, use_pastasoss=False, soss_estimate=None)

      Method to run the step.




.. py:function:: specprofilestep(datafiles, empirical=True, output_dir='./')

   Wrapper around the APPLESOSS module to construct a specprofile
   reference file tailored to the particular TSO being analyzed.

   :param datafiles: Input datamodels or paths to datamodels for each segment.
   :type datafiles: array-like[str], array-like[jwst.RampModel]
   :param empirical: If True, construct profiles using only the data. If False, fall back
                     on WebbPSF for the trace wings. Note: The current WebbPSF wings are
                     known to not accurately match observations. This mode is therefore not
                     advised.
   :type empirical: bool
   :param output_dir: Directory to which to save outputs.
   :type output_dir: str

   :returns: **filename** -- Name of the output file.
   :rtype: str


.. py:function:: box_extract_soss(datafiles, centroids, soss_width, do_plot=False, show_plot=False, save_results=True, output_dir='./')

   Perform a simple box aperture extraction on SOSS orders 1 and 2.

   :param datafiles: Input datamodels or paths to datamodels for each segment.
   :type datafiles: array-like[str], array-like[jwst.RampModel]
   :param centroids: Dictionary of centroid positions for all SOSS orders.
   :type centroids: dict
   :param soss_width: Width of extraction box. Or 'optimize'.
   :type soss_width: int, str
   :param do_plot: If True, do the step diagnostic plot.
   :type do_plot: bool
   :param show_plot: If True, show the step diagnostic plot instead of/in addition to
                     saving it to file.
   :type show_plot: bool
   :param output_dir: Directory to which to output results.
   :type output_dir: str
   :param save_results: If True, save results to file.
   :type save_results: bool

   :returns: * **wave_o1** (*array_like[float]*) -- 2D wavelength solution for order 1.
             * **flux_o1** (*array_like[float]*) -- 2D extracted flux for order 1.
             * **ferr_o1** (*array_like[float]*) -- 2D flux errors for order 1.
             * **wave_o2** (*array_like[float]*) -- 2D wavelength solution for order 2.
             * **flux_o2** (*array_like[float]*) -- 2D extracted flux for order 2.
             * **ferr_o2** (*array_like[float]*) -- 2D flux errors for order 2.
             * **soss_width** (*int*) -- Optimized aperture width.


.. py:function:: do_box_extraction(cube, err, ypos, width, extract_start=0, extract_end=None, progress=True)

   Do intrapixel aperture extraction.

   :param cube: Data cube.
   :type cube: array-like(float)
   :param err: Error cube.
   :type err: array-like(float)
   :param ypos: Detector Y-positions to extract.
   :type ypos: array-like(float)
   :param width: Full-width of the extraction aperture to use.
   :type width: int
   :param extract_start: Detector X-position at which to start extraction.
   :type extract_start: int
   :param extract_end: Detector X-position at which to end extraction.
   :type extract_end: int, None
   :param progress: if True, show extraction progress bar.
   :type progress: bool

   :returns: * **f** (*np.array(float)*) -- Extracted flux values.
             * **ferr** (*np.array(float)*) -- Extracted error values.


.. py:function:: do_ccf(wave, flux, err, mod_flux, nsteps=1000)

   Perform a cross-correlation analysis between an extracted and model
   stellar spectrum to determine the appropriate wavelength shift between
   the two.

   :param wave: Wavelength axis.
   :type wave: array-like[float]
   :param flux: Extracted spectrum.
   :type flux: array-like[float]
   :param err: Errors on extracted spectrum.
   :type err: array-like[float]
   :param mod_flux: Model spectrum.
   :type mod_flux: array-like[float]
   :param nsteps: Number of wavelength steps to test.
   :type nsteps: int

   :returns: **shift** -- Wavelength shift between the model and extracted spectrum in microns.
   :rtype: float


.. py:function:: format_extracted_spectra(datafiles, times, extract_params, target_name, st_teff=None, st_logg=None, st_met=None, throughput=None, pwcpos=None, output_dir='./', save_results=True, use_pastasoss=False)

   Unpack the outputs of the 1D extraction and format them into
   lightcurves at the native detector resolution.

   :param datafiles: Input extract1d data files.
   :type datafiles: array-like[str], array-like[MultiSpecModel], tuple
   :param times: Time stamps corresponding to each integration.
   :type times: array-like[float]
   :param output_dir: Directory to which to save outputs.
   :type output_dir: str
   :param save_results: If True, save outputs to file.
   :type save_results: bool
   :param extract_params: Dictonary of parameters used for the 1D extraction.
   :type extract_params: dict
   :param target_name: Name of the target.
   :type target_name: str
   :param st_teff: Stellar effective temperature.
   :type st_teff: float, None
   :param st_logg: Stellar log surface gravity.
   :type st_logg: float, None
   :param st_met: Stellar metallicity as [Fe/H].
   :type st_met: float, None
   :param throughput: Path to JWST spectrace reference file.
   :type throughput: str
   :param pwcpos: Filter wheel position. Only necessary is use_pastasoss is True.
   :type pwcpos: float
   :param use_pastasoss: If True, use pastasoss package to predict wavelength solution based on
                         pupil wheel position. Note that this will only allow the extraction of
                         order 2 from 0.6 - 0.85Âµm.
   :type use_pastasoss: bool

   :returns: **spectra** -- 1D stellar spectra at the native detector resolution.
   :rtype: dict


.. py:function:: get_soss_estimate(atoca_spectra, output_dir)

   Convert the AtocaSpectra output of ATOCA into the format expected for a
   soss_estimate.

   :param atoca_spectra: AtocaSpectra datamodel, or path to the datamodel.
   :type atoca_spectra: str, MultiSpecModel
   :param output_dir: Directory to which to save results.
   :type output_dir: str

   :returns: **estimate_filename** -- Path to soss_estimate file.
   :rtype: str


.. py:function:: run_stage3(results, save_results=True, root_dir='./', force_redo=False, extract_method='box', specprofile=None, centroids=None, soss_width=40, st_teff=None, st_logg=None, st_met=None, planet_letter='b', output_tag='', do_plot=False, show_plot=False, **kwargs)

   Run the exoTEDRF Stage 3 pipeline: 1D spectral extraction, using
   a combination of the official STScI DMS and custom steps.

   :param results: exoTEDRF Stage 2 outputs for each segment.
   :type results: array-like[str], array-like[CubeModel]
   :param save_results: If True, save the results of each step to file.
   :type save_results: bool
   :param root_dir: Directory from which all relative paths are defined.
   :type root_dir: str
   :param force_redo: If True, redo steps even if outputs files are already present.
   :type force_redo: bool
   :param extract_method: Either 'box' or 'atoca'. Runs the applicable 1D extraction routine.
   :type extract_method: str
   :param specprofile: Specprofile reference file; only neceessary for ATOCA extractions.
   :type specprofile: str, None
   :param centroids: Path to file containing trace positions for each order.
   :type centroids: str, None
   :param soss_width: Width around the trace centroids, in pixels, for the 1D extraction.
   :type soss_width: int
   :param st_teff: Stellar effective temperature.
   :type st_teff: float, None
   :param st_logg: Stellar log surface gravity.
   :type st_logg: float, None
   :param st_met: Stellar metallicity as [Fe/H].
   :type st_met: float, None
   :param planet_letter: Letter designation for the planet.
   :type planet_letter: str
   :param output_tag: Name tag to append to pipeline outputs directory.
   :type output_tag: str
   :param do_plot: If True, make step diagnostic plot.
   :type do_plot: bool
   :param show_plot: Only necessary if do_plot is True. Show the diagnostic plots in
                     addition to/instead of saving to file.
   :type show_plot: bool

   :returns: **specra** -- 1D stellar spectra for each wavelength bin at the native detector
             resolution.
   :rtype: dict


